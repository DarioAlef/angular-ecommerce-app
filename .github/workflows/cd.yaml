name: üöÄ Construir, Enviar Imagens Docker e Deploy no Kubernetes (Universal)

on:
  push:
    branches: [ "main" ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    env:
      NAMESPACE: app-demo
      BACKEND_TAG: ${{ github.sha }}
      FRONTEND_TAG: ${{ github.sha }}
      INFRA_BASE: https://raw.githubusercontent.com/dissectedv/loja-infra/main
      DOCKER_USER: ${{ secrets.DOCKER_USER }}
      FRONTEND_URL: ${{ secrets.FRONTEND_URL }}

    steps:
      - name: 1Ô∏è‚É£ Baixar c√≥digo
        uses: actions/checkout@v3

      - name: 2Ô∏è‚É£ Configurar Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 3Ô∏è‚É£ Login no Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: 4Ô∏è‚É£ Buildar e enviar imagem do Backend
        uses: docker/build-push-action@v6
        with:
          context: ./backend
          push: true
          tags: ${{ secrets.DOCKER_USER }}/backend:${{ github.sha }}
          no-cache: true
          pull: true

      - name: 5Ô∏è‚É£ Buildar e enviar imagem do Frontend
        uses: docker/build-push-action@v6
        with:
          context: ./client
          push: true
          tags: ${{ secrets.DOCKER_USER }}/frontend:${{ github.sha }}
          no-cache: true
          pull: true

      - name: 6Ô∏è‚É£ Instalar kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: 7Ô∏è‚É£ Configurar kubeconfig
        run: |
          mkdir -p $HOME/.kube
          echo "${{ secrets.KUBE_CONFIG_DATA }}" | base64 --decode > $HOME/.kube/config
          kubectl get ns $NAMESPACE || kubectl create ns $NAMESPACE
          echo "‚úÖ kubeconfig aplicado com sucesso"

      - name: 8Ô∏è‚É£ Baixar manifestos Kubernetes (infra externa)
        run: |
          set -e
          mkdir -p k8s
          for f in 00-namespace.yaml 01-secret-mysql.yaml 02-configmap-app.yaml 03-configmap-mysql-init.yaml 04-configmap-mysql-dump.yaml 10-mysql-service.yaml 11-mysql-statefulset.yaml 20-backend-service.yaml 21-backend-deployment.yaml 30-frontend-service.yaml 31-frontend-deployment.yaml 50-job-mysql-import.yaml kustomization.yaml; do
            echo "‚¨á  Baixando $f"
            curl -fsSL "$INFRA_BASE/$f" -o "k8s/$f"
          done
          test -s k8s/kustomization.yaml || { echo "‚ùå Falha ao baixar kustomization.yaml"; exit 1; }
          echo "‚úÖ Manifestos baixados com sucesso"

      - name: 9Ô∏è‚É£ Aplicar manifestos no cluster
        run: |
          kubectl apply -k k8s --validate=false --insecure-skip-tls-verify
          echo "‚úÖ Manifestos aplicados com sucesso"

      - name: üîü Atualizar imagens nos deployments
        run: |
          kubectl set image deployment/backend app=${{ secrets.DOCKER_USER }}/backend:${{ github.sha }} -n $NAMESPACE --insecure-skip-tls-verify
          kubectl set image deployment/frontend web=${{ secrets.DOCKER_USER }}/frontend:${{ github.sha }} -n $NAMESPACE --insecure-skip-tls-verify
          echo "‚úÖ Imagens atualizadas"

      - name: 1Ô∏è‚É£1Ô∏è‚É£ Aguardar rollout dos deployments
        run: |
          kubectl rollout status deployment/backend -n $NAMESPACE --timeout=180s || kubectl logs -l app.kubernetes.io/name=backend -n $NAMESPACE --tail=50
          kubectl rollout status deployment/frontend -n $NAMESPACE --timeout=180s || kubectl logs -l app.kubernetes.io/name=frontend -n $NAMESPACE --tail=50
          echo "‚úÖ Rollouts conclu√≠dos"

      - name: 1Ô∏è‚É£2Ô∏è‚É£ Executar job SQL de importa√ß√£o (se necess√°rio)
        run: |
          kubectl delete job mysql-import-job -n $NAMESPACE --ignore-not-found
          kubectl apply -f k8s/50-job-mysql-import.yaml -n $NAMESPACE
          echo "‚úÖ Job SQL aplicada (se o BD estiver vazio, ser√° importado)"

      - name: 1Ô∏è‚É£3Ô∏è‚É£ Resumo final do deploy
        run: |
          echo "‚úÖ Backend e Frontend atualizados com sucesso"
          echo "üì¶ Tags Docker usadas: ${{ github.sha }}"
          echo "üöÄ Deploy conclu√≠do!"